// <auto-generated />
using MCC_Launcher;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MCC_Launcher.Migrations
{
    [DbContext(typeof(LauncherDbContext))]
    partial class LauncherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MCC_Launcher.Models.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionID"));

                    b.Property<string>("PermissionName")
                        .HasColumnType("text");

                    b.HasKey("PermissionID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MCC_Launcher.Models.ProgramVersionEntity", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VersionId"));

                    b.Property<string>("InstallPath")
                        .HasColumnType("text");

                    b.Property<string>("MainExecutablePath")
                        .HasColumnType("text");

                    b.Property<int>("ProgramCode")
                        .HasColumnType("integer");

                    b.Property<string>("SmbSourcePath")
                        .HasColumnType("text");

                    b.Property<string>("VersionName")
                        .HasColumnType("text");

                    b.HasKey("VersionId");

                    b.HasIndex("ProgramCode");

                    b.ToTable("ProgramVersion");
                });

            modelBuilder.Entity("MCC_Launcher.Models.ProgramsEntity", b =>
                {
                    b.Property<int>("ProgramCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProgramCode"));

                    b.Property<bool>("AllowAnonymousInstall")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowAnonymousRun")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ProgramCode");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("MCC_Launcher.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MCC_Launcher.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionID")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("MCC_Launcher.Models.RoleProgramPermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("ProgramCode")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "ProgramCode", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ProgramCode");

                    b.ToTable("RoleProgramPermissions");
                });

            modelBuilder.Entity("MCC_Launcher.Models.UserInfo", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MCC_Launcher.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MCC_Launcher.Models.ProgramVersionEntity", b =>
                {
                    b.HasOne("MCC_Launcher.Models.ProgramsEntity", "Program")
                        .WithMany("Versions")
                        .HasForeignKey("ProgramCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MCC_Launcher.Models.RolePermission", b =>
                {
                    b.HasOne("MCC_Launcher.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MCC_Launcher.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MCC_Launcher.Models.RoleProgramPermission", b =>
                {
                    b.HasOne("MCC_Launcher.Models.Permission", "Permission")
                        .WithMany("RoleProgramPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MCC_Launcher.Models.ProgramsEntity", "Program")
                        .WithMany("RoleProgramPermissions")
                        .HasForeignKey("ProgramCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MCC_Launcher.Models.Role", "Role")
                        .WithMany("RoleProgramPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Program");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MCC_Launcher.Models.UserRole", b =>
                {
                    b.HasOne("MCC_Launcher.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MCC_Launcher.Models.UserInfo", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MCC_Launcher.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("RoleProgramPermissions");
                });

            modelBuilder.Entity("MCC_Launcher.Models.ProgramsEntity", b =>
                {
                    b.Navigation("RoleProgramPermissions");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("MCC_Launcher.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("RoleProgramPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MCC_Launcher.Models.UserInfo", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
