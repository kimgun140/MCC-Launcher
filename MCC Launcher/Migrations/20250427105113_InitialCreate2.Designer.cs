// <auto-generated />
using System;
using MCC_Launcher;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MCC_Launcher.Migrations
{
    [DbContext(typeof(LauncherDbContext))]
    [Migration("20250427105113_InitialCreate2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MCC_Launcher.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("PermissionName")
                        .HasColumnType("text");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MCC_Launcher.Models.ProgramEntity", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProgramId"));

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProgramId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("MCC_Launcher.Models.ProgramVersionEntity", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VersionId"));

                    b.Property<string>("InstallPath")
                        .HasColumnType("text");

                    b.Property<string>("MainExecutable")
                        .HasColumnType("text");

                    b.Property<string>("PatchNote")
                        .HasColumnType("text");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("SmbSourcePath")
                        .HasColumnType("text");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VersionId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramVersion");
                });

            modelBuilder.Entity("MCC_Launcher.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MCC_Launcher.Models.RoleProgramPermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleProgramPermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "ProgramId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ProgramId");

                    b.ToTable("RoleProgramPermissions");
                });

            modelBuilder.Entity("MCC_Launcher.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Pw")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MCC_Launcher.Models.UserProgramPeriod", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("ProgramCode")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ProgramCode");

                    b.HasIndex("ProgramCode");

                    b.ToTable("UserProgramPeriods");
                });

            modelBuilder.Entity("MCC_Launcher.Models.ProgramVersionEntity", b =>
                {
                    b.HasOne("MCC_Launcher.Models.ProgramEntity", "Program")
                        .WithMany("Versions")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("MCC_Launcher.Models.RoleProgramPermission", b =>
                {
                    b.HasOne("MCC_Launcher.Models.Permission", "Permission")
                        .WithMany("RoleProgramPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MCC_Launcher.Models.ProgramEntity", "Program")
                        .WithMany("RoleProgramPermissions")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MCC_Launcher.Models.Role", "Role")
                        .WithMany("RoleProgramPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Program");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MCC_Launcher.Models.User", b =>
                {
                    b.HasOne("MCC_Launcher.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MCC_Launcher.Models.UserProgramPeriod", b =>
                {
                    b.HasOne("MCC_Launcher.Models.ProgramEntity", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MCC_Launcher.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MCC_Launcher.Models.Permission", b =>
                {
                    b.Navigation("RoleProgramPermissions");
                });

            modelBuilder.Entity("MCC_Launcher.Models.ProgramEntity", b =>
                {
                    b.Navigation("RoleProgramPermissions");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("MCC_Launcher.Models.Role", b =>
                {
                    b.Navigation("RoleProgramPermissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
